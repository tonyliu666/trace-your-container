// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadSyscall returns the embedded CollectionSpec for syscall.
func loadSyscall() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_SyscallBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load syscall: %w", err)
	}

	return spec, err
}

// loadSyscallObjects loads syscall and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*syscallObjects
//	*syscallPrograms
//	*syscallMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadSyscallObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadSyscall()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// syscallSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type syscallSpecs struct {
	syscallProgramSpecs
	syscallMapSpecs
}

// syscallSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type syscallProgramSpecs struct {
	CollectSysCalls *ebpf.ProgramSpec `ebpf:"collect_sys_calls"`
}

// syscallMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type syscallMapSpecs struct {
	PktCount *ebpf.MapSpec `ebpf:"pkt_count"`
}

// syscallObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadSyscallObjects or ebpf.CollectionSpec.LoadAndAssign.
type syscallObjects struct {
	syscallPrograms
	syscallMaps
}

func (o *syscallObjects) Close() error {
	return _SyscallClose(
		&o.syscallPrograms,
		&o.syscallMaps,
	)
}

// syscallMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadSyscallObjects or ebpf.CollectionSpec.LoadAndAssign.
type syscallMaps struct {
	PktCount *ebpf.Map `ebpf:"pkt_count"`
}

func (m *syscallMaps) Close() error {
	return _SyscallClose(
		m.PktCount,
	)
}

// syscallPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadSyscallObjects or ebpf.CollectionSpec.LoadAndAssign.
type syscallPrograms struct {
	CollectSysCalls *ebpf.Program `ebpf:"collect_sys_calls"`
}

func (p *syscallPrograms) Close() error {
	return _SyscallClose(
		p.CollectSysCalls,
	)
}

func _SyscallClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed syscall_bpfel.o
var _SyscallBytes []byte
